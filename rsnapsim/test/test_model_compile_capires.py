# -*- coding: utf-8 -*-
"""
Created on Tue Sep 14 12:36:02 2021

@author: willi
"""
import os
print(os.getcwd())
os.chdir('../..')
print(os.getcwd())
import rsnapsim as rss
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import kde
import time
os.chdir('./rsnapsim/test')
#@title CAP_IRES sequences
amanda_IRES = '''atgataataGCTAGCTCTGGAGGAGAAGAACTTTTGAGCAAGAATTATCATCTTGAGAACGAAGTGGCTCGTCTTAAGAAAGGTTCTGGCAGTGGAGAAGAACTGCTTTCAAAGAATTACCACCTGGAAAATGAGGTAGCTAGACTGAAAAAGGGGAGCGGAAGTGGGGAGGAGTTGCTGAGCAAAAATTATCATTTGGAGAACGAAGTAGCACGACTAAAGAAAGGGTCCGGATCGGGTGAGGAGTTACTCTCGAAAAATTATCATCTCGAAAACGAAGTGGCTCGGCTAAAAAAGGGCAGTGGTTCTGGAGAAGAGCTATTATCTAAAAACTACCACCTCGAAAATGAGGTGGCACGCTTAAAAAAGGGAAGTGGCAGTGGTGAAGAGCTACTATCCAAGAATTATCATCTTGAGAACGAGGTAGCGCGTTTGAAGAAGGGTTCCGGCTCAGGAGAGGAACTGCTCTCGAAGAACTATCATCTTGAAAATGAGGTCGCTCGATTAAAAAAGGGATCGGGCAGTGGTGAGGAACTACTTTCAAAGAATTACCACCTCGAAAACGAAGTAGCTCGATTAAAGAAAGGTTCAGGGTCGGGTGAAGAATTACTGAGTAAAAATTATCATCTGGAAAATGAGGTAGCGAGACTAAAAAAGGGGAGTGGTTCTGGCGAAGAGTTGCTATCGAAAAATTATCATCTTGAGAACGAAGTTGCTAGGCTCAAAAAGGGCTCAGGCTCAGGCGAGGAGTTGCTCTCGAAAAACTACCACTTGGAAAATGAGGTCGCGAGGTTGAAAAAGGGGAGCGGGTCGGGCGAGGAGTTATTGAGCAAAAACTATCATTTAGAGAACGAAGTCGCGCGCTTAAAGAAAGGCTCGGGCTCGGGCGAAGAACTCTTATCGAAGAACTACCACCTCGAAAATGAGGTCGCCAGGTTGAAAAAGGGCAGTGGCAGCGGGGAGGAACTCTTGAGCAAGAACTACCACTTGGAGAATGAGGTCGCGAGATTGAAGAAAGGGTCGGGGAGCGGCGAGGAATTGCTCAGCAAGAATTATCATTTGGAGAACGAAGTCGCCAGGCTCAAGAAAGGCTCGGGGTCGGGGGAGGAATTGTTGAGTAAAAACTACCACTTGGAAAATGAAGTCGCCAGGCTCAAAAAAGGGAGTGGGAGCGGCGAAGAGTTATTGAGCAAAAATTACCACTTGGAGAACGAAGTGGCAAGGCTCAAGAAAGGGAGCGGCAGCGGGGAGGAGCTCTTATCGAAGAACTACCACTTAGAGAATGAAGTCGCCCGCTTGAAGAAAGGCTCGGGGAGCGGGGAAGAGCTCTTGAGCAAGAACTACCACTTGGAAAATGAGGTGGCGCGCTTGAAGAAAGGGAGCGGGAGCGGGGAAGAGTTACTATCTAAGAATTATCATCTCGAGAACGAGGTGGCTCGACTAAAGAAGGGCTCCGGCAGTGGGGAGGAACTCCTGTCGAAGAACTATCATCTTGAAAATGAGGTTGCAAGACTTAAAAAGGGGTCCGGATCAGGTGAGGAACTACTCAGTAAGAATTACCACCTGGAAAACGAAGTTGCACGTTTGAAGAAAGGATCAGGATCAGGCGAAGAACTGCTCTCAAAAGATTATCATTTGGAAAATGAGGTTGCACGTTTAAAAAAGGGAAGTGGCAGTGGTGAGGAACTTCTGTCGAAAAATTATCATCTCGAGAATGAAGTAGCCCGACTTAAAAAGGGTTCTGGCTCGGGTCAGCGGCCGCACCGGTCAGCAGTGGAGGACAGCACGCTGCAAGTAGTGGTACGGGTGCGGCCCCCCACCCCTCGGGAGCTGGACAGTCAGCGGCGGCCAGTGGTTCAGGTGGTGGACGAGCGGGTGCTGGTGTTTAACCCTGAGGAGCCCGATGGAGGGTTCCCTGGCCTGAAATGGGGTGGCACCCATGATGGCCCCAAGAAGAAGGGCAAAGACCTGACGTTTGTCTTTGACCGGGTCTTTGGCGAGGCGGCCACCCAACAGGACGTGTTCCAGCACACCACGCACAGCGTCCTGGACAGCTTCCTCCAGGGCTACAACTGCTCAGTGTTTGCCTACGGGGCCACCGGGGCTGGGAAGACACACACCATGCTGGGAAGGGAGGGGGACCCCGGCATCATGTACCTGACCACCGTGGAACTGTACAGGCGCCTGGAGGCCCGCCAGCAGGAGAAGCACTTCGAGGTGCTCATCAGCTACCAGGAGGTGTATAATGAACAGATCCATGACCTCCTGGAGCCCAAGGGGCCCCTTGCCATCCGCGAGGACCCCGACAAGGGGGTGGTGGTGCAAGGACTTTCTTTCCACCAGCCAGCCTCAGCCGAGCAGCTGCTGGAGATACTGACCAGGGGGAACCGTAACCGCACGCAGCACCCCACTGATGCCAACGCGACTTCCTCCCGCTCCCATGCCATCTTCCAGATCTTTGTGAAGCAGCAGGACCGGGTTCCAGGACTGACCCAGGCTGTCCAGGTGGCCAAGATGAGCCTGATTGACCTGGCTGGCTCAGAGCGGGCATCCAGCACCCATGCGAAGGGGGAGCGGCTGCGGGAGGGGGCCAACATCAACCGCTCTCTGCTGGCGCTCATCAACGTCCTCAATGCCTTGGCCGATGCAAAGGGCCGCAAGACCGCTGTGCCCTACGCGGACAGCGCACTGACCCGCCTGCTCAAAGACTCCCTCGGGGGCAACTGCCGCACAGTGATGATCGCTGCCATCAGCCCCTCCAGCCTGACCTACGAGGACACGTATAATACCCTCAAATATGCCGACCGGGCCAAGGAGATCAGGCTCTCGCTGAAGAGCAATGTGACCAGCCTGGACTGTCACATCAGCCAGTATGCTACCATCTGCCAACAGCTCCAGGCTGAGGTAGCCGCTCTGAGGAAGAAGCTCCAAGTGTATGAGGGGGGAGGCCAGCCCCCACCACAGGACCTCCCAGGATCTCCCAAGTCGGGACCACCACCAGAACACCTTCCCAGCTCCCCCTTGCCACCCCACCCTCCCAGCCAGCCCTGCACCCCAGAGCTCCCTGCAGGGCCTAGAGCCCTTCAAGAGGAGAGTCTGGGGATGGAGGCCCAGGTGGAGAGGGCCATGGAAGGGAACTCTTCAGACCAGGAGCAGTCCCCAGAGGATGAGGATGAAGGCCCAGCTGAGGAGGTTCCAACCCAGATGCCAGAGCAGAACCCCACACATGCACTGCCAGAGTCCCCTCGCCTGACCCTGCAGCCCAAGCCAGTCGTGGGCCACTTCTCAGCACGGGAACTGGATGGGGACCGTTCTAAGCGGTTGGCCCTAAAGGTGCTGTGCGTTGCCCAGCGGCAGTACTCCCTGCTCCAAGCAGCCAACCTCCTGACGCCCGACATGATCACAGAGTTTGAGACCCTACAGCAGCTGGTGCAAGAGGAAAAAATTGAGCCTGGGGCAGAGGCCTTGAGGACTTCAGGCCTGGCCAGGGGGGCACCTCTGGCTCAGGAGCTGTGTTCAGAGTCAAAGCCTCCAGGATACACTGGCCCTGTGACCCGGACTATGGCGAGGCGACTGAGTGGCCCCCTGCACACCCTGGGAATCCCGCCTGGACCCAACTGCACCCCAGCCCAGGGGTCCCGATGGCCCATGGAGAAGAAGAGGAGGAGACCAAGCGCCTTGGAGGCAGACAGTCCCATGGCCCCAAAGCGGGGCACCAAGCGCCAGCGCCAGTCCTTCCTGCCCTGCCTAAGGAGAGGGTCTCTGCCTGACACCCAACCTTCACAGGGGCCCAGCACCCCCAAAGGAGAAAGGGCCTCCTCCCCCTGCCATTCCCCTCGCGTTTGCCCAGCCACAGTCATCAAAAGCCGGGTGCCCCTGGGCCCTTCCGCCATGCAGAACTGCTCCACCCCGCTGGCTCTGCCCACTCGAGACCTCAATGCCACCTTTGATCTCTCTGAGGAGCCTCCCTCAAAGCCCAGTTTCCATGAATGCATTGGCTGGGACAAAATACCCCAGGAGCTGAGCAGGCTGGACCAGCCCTTCATCCCCAGGGCACCTGTGCCCCTGTTCACCATGAAGGGCCCCAAGCCAACATCTTCCCTCCCTGGGACCTCTGCCTGCAAGAAGAAGCGCGTTGCGAGTTCCTCAGTCTCCCATGGCCGCAGCCGCATCGCCCGCCTCCCCAGCAGCACTTTGAAGAGGCCAGCTGGGCCCCTTGTACTCCCAGAGCTGCCCTTGAGTCCCCTGTGCCCTAGCAACCGGAGGAATGGAAAGGACCTCATCAGGGTGGGGAGAGCACTCTCAGCAGGGAACGGCGTCACCAAGGTGTCCGATAAGGACCTAGGCGGACTGTTACTGAGCTGCGTTTTACACCCTTTCTTTGACAAAACCTAA'''
amanda_CAP = '''ATGGACTACAAGGACGACGACGACAAAGGTGACTACAAAGATGATGACGATAAAGGCGACTATAAGGACGATGACGACAAGGGCGGAAACTCACTGATCAAGGAAAACATGCGGATGAAGGTGGTGATGGAGGGCTCCGTGAATGGTCACCAGTTCAAGTGCACCGGAGAGGGAGAGGGAAACCCGTACATGGGAACTCAGACCATGCGCATTAAGGTCATCGAAGGAGGTCCGCTGCCGTTCGCTTTCGATATCCTGGCCACTTCGTTCGGAGGAGGGTCGCGCACGTTCATCAAGTACCCGAAGGGAATCCCGGACTTCTTTAAGCAGTCATTCCCGGAAGGATTCACTTGGGAACGGGTGACCCGGTATGAAGATGGAGGTGTGGTGACTGTCATGCAAGATACTTCGCTGGAGGATGGGTGCCTCGTGTACCACGTCCAAGTCCGCGGAGTGAATTTCCCGTCCAACGGACCAGTGATGCAGAAAAAGACGAAGGGTTGGGAACCTAATACTGAAATGATGTACCCCGCAGACGGAGGGCTGAGGGGCTACACCCACATGGCGCTGAAGGTCGACGGAGGAGATTACAAGGATGACGACGATAAGCAACAAGATTACAAAGACGATGATGACAAGGGCCAGCAGGGCGACTACAAGGACGACGACGACAAGCAGCAGGACTACAAAGATGACGATGATAAAGGAGGAGGACATCTGTCCTGTTCGTTCGTGACCACCTACAGATCAAAGAAAACCGTGGGAAACATCAAGATGCCGGGCATTCATGCCGTCGACCACCGCCTGGAGCGGCTCGAAGAATCAGACAATGAGATGTTCGTCGTGCAAAGAGAACATGCCGTGGCCAAGTTCGCGGGACTGGGAGGCGGTGGAGGCGATTACAAAGACGATGATGACAAGGGTGACTATAAAGACGACGATGACAAAGGGGATTACAAGGATGATGATGATAAGGGAGGCGGTGGATCAGGTGGAGGAGGTTCACTGCAGGCGATCGCCATGGAGGCGGCCACCACACTGCACCCAGGCCCGCGCCCGGCGCTGCCCCTCGGGGGCCCGGGCCCGCTGGGCGAGTTCCTGCCTCCACCCGAGTGCCCGGTCTTCGAACCCAGCTGGGAAGAGTTCGCGGACCCCTTCGCTTTCATCCACAAGATCCGGCCCATAGCCGAGCAGACTGGCATCTGTAAGGTGCGGCCGCCGCCGGATTGGCAGCCACCATTTGCATGTGATGTTGATAAACTTCATTTTACGCCACGTATCCAGAGACTGAATGAATTGGAGGCCCAAACTCGTGTAAAATTGAATTTCTTGGACCAGATTGCAAAGTACTGGGAGTTACAGGGAAGTACTCTGAAAATTCCACATGTGGAGAGGAAGATCTTGGACTTATTTCAGCTTAATAAGTTAGTTGCAGAAGAAGGTGGATTTGCAGTTGTTTGCAAGGATAGAAAATGGACCAAAATTGCTACCAAGATGGGGTTTGCTCCTGGCAAAGCAGTGGGCTCACATATCAGAGGGCATTATGAACGAATTCTCAACCCCTACAACTTATTCCTGTCCGGAGACAGCCTAAGGTGTTTGCAGAAGCCAAACCTGACCACAGACACTAAGGACAAGGAGTACAAACCCCATGATATTCCCCAGAGGCAGTCTGTGCAGCCTTCGGAAACGTGCCCCCCAGCCCGACGAGCAAAACGCATGAGAGCAGAGGCCATGAATATTAAAATAGAACCCGAGGAGACAACAGAAGCCAGAACTCATAATCTGAGACGTCGAATGGGTTGTCCAACTCCAAAATGTGAAAATGAGAAAGAAATGAAGAGTAGCATCAAGCAAGAACCTATTGAGAGGAAAGATTATATTGTAGAAAATGAGAAGGAAAAGCCCAAGAGTCGATCTAAAAAAGCCACCAATGCTGTGGACCTGTATGTCTGTCTTTTATGTGGCAGTGGCAATGATGAAGACCGGCTACTGTTGTGTGATGGCTGTGATGACAGTTACCATACCTTTTGCTTGATCCCACCTCTCCATGATGTTCCCAAGGGAGACTGGAGGTGTCCTAAGTGTTTGGCTCAGGAATGTAGTAAGCCACAAGAAGCATTTGGCTTTGAACAAGCAGCCAGGGACTATACCCTCCGTACTTTTGGGGAAATGGCAGATGCGTTCAAATCTGATTACTTCAACATGCCAGTCCATATGGTCCCCACAGAGCTTGTTGAGAAAGAATTTTGGAGACTAGTAAGCACTATTGAGGAGGATGTCACAGTGGAATATGGAGCTGACATTGCCTCAAAGGAATTTGGCAGTGGCTTTCCTGTCCGAGATGGGAAAATCAAACTCTCACCTGAGGAAGAGGAGTATCTTGATAGTGGCTGGAATTTGAACAACATGCCAGTGATGGAGCAGTCTGTCCTTGCACATATTACTGCTGATATATGTGGCATGAAACTTCCTTGGTTGTATGTGGGAATGTGCTTTTCTTCATTCTGTTGGCACATTGAAGACCACTGGAGCTATTCAATTAACTACTTGCACTGGGGTGAGCCAAAAACCTGGTATGGAGTCCCAGGGTATGCTGCTGAGCAGCTAGAAAATGTAATGAAGAAACTAGCTCCAGAACTCTTTGTGTCCCAGCCGGATCTCCTCCATCAGCTTGTGACCATCATGAACCCCAATACCCTGATGACTCATGAAGTGCCTGTTTACCGAACTAATCAGTGTGCTGGGGAGTTTGTGATTACATTTCCAAGAGCCTACCACAGTGGTTTTAACCAGGGTTTTAATTTTGCTGAGGCTGTTAACTTCTGCACTGTTGATTGGCTGCCATTAGGCCGACAGTGTGTGGAGCATTATCGCTTGCTTCATCGATATTGTGTGTTTTCCCACGATGAGATGATCTGCAAGATGGCTTCCAAGGCTGATGTATTAGATGTTGTAGTGGCTTCAACTGTTCAGAAAGACATGGCCATTATGATTGAGGATGAGAAAGCTTTAAGAGAAACTGTCCGTAAATTGGGAGTGATTGATTCGGAAAGAATGGATTTTGAGCTGTTGCCAGATGATGAACGTCAGTGTGTAAAATGCAAAACTACATGCTTCATGTCTGCCATCTCCTGTTCTTGTAAACCTGGCCTTCTTGTTTGCCTGCATCATGTAAAAGAATTGTGTTCCTGTCCTCCTTATAAATATAAATTGCGGTATAGGTACACGCTGGATGATCTCTACCCTATGATGAATGCATTGAAGCTTCGAGCAGAATCTTACAACGAATGGGCCTTGAATGTGAATGAAGCTTTGGAGGCAAAGATCAACAAGAAGAAAAGCCTTGTCAGCTTCAAGGCTTTAATTGAAGAATCTGAAATGAAGAAATTCCCAGACAATGATCTTTTGCGACACCTTCGCCTAGTCACACAGGATGCAGAGAAGTGTGCCTCTGTTGCGCAGCAGTTGCTTAATGGCAAAAGGCAAACTAGATATCGATCTGGTGGAGGGAAATCCCAAAATCAGTTGACAGTGAATGAGCTCCGGCAGTTTGTAACACAGCTGTATGCTCTTCCATGTGTCCTCAGTCAGACACCATTACTAAAGGATCTCTTGAATCGTGTAGAAGATTTTCAACAGCATAGTCAGAAACTACTCTCTGAGGAAACGCCTAGTGCTGCGGAGCTGCAGGACTTGCTAGATGTCAGCTTTGAATTTGATGTTGAACTTCCACAGCTTGCTGAGATGCGTATCCGTTTGGAACAAGCCCGTTGGCTAGAAGAGGTGCAGCAAGCTTGCCTAGACCCCAGCTCCCTTACTTTAGATGATATGAGACGTCTCATAGACCTAGGGGTAGGGCTGGCCCCGTATTCAGCAGTGGAGAAAGCTATGGCCCGGCTGCAGGAACTGCTCACAGTGTCAGAGCACTGGGACGACAAAGCCAAGAGTCTCCTCAAGGCCAGGCCACGACATTCATTGAATAGCCTTGCTACGGCAGTAAAGGAAATCGAAGAGATCCCTGCATATCTGCCCAATGGTGCGGCTCTGAAAGACTCAGTGCAGAGAGCCAGAGACTGGCTTCAGGATGTAGAGGGCCTGCAGGCTGGAGGACGTGTGCCAGTGTTAGACACACTCATAGAACTTGTTACACGAGGCCGATCTATCCCGGTACATCTGAATTCTTTGCCAAGACTGGAAACCCTAGTAGCTGAGGTTCAGGCTTGGAAAGAATGTGCTGTTAATACATTCTTGACTGAGAATTCTCCATATTCTCTCTTAGAGGTGCTGTGTCCTCGATGTGATATTGGCCTTTTGGGATTGAAAAGGAAGCAGAGAAAGTTAAAGGAGCCCTTGCCAAATGGAAAGAAAAAAAGCACCAAATTAGAGAGTCTGAGTGACCTGGAGAGAGCTTTAACTGAAAGCAAGGAGACTGCTTCAGCTATGGCAACTCTTGGGGAAGCTCGCCTAAGGGAAATGGAAGCCTTGCAGTCTCTCAGACTCGCCAATGAAGGGAAATTGCTGTCGCCTCTCCAAGATGTGGATATAAAAATCTGCCTATGTCAGAAGGCCCCAGCTGCCCCTATGATTCAATGTGAACTCTGCAGGGATGCTTTCCACACCAGTTGTGTGGCGGTACCCAGTATTTCACAGGGCCTGCGAATCTGGCTTTGTCCCCATTGTCGGAGGTCAGAGAAACCTCCATTAGAGAAAATTCTGCCCCTGCTCGCCTCCCTTCAGCGTATCCGAGTTCGCCTTCCTGAGGGAGATGCACTTCGATATATGATTGAAAGAACCGTGAACTGGCAGCACAGAGCCCAGCAACTGCTTTCGTCAGGGAATCTTAAATTTGTGCAAGATCGAGTGGGCTCAGGACTGTTATATAGCAGATGGCAAGCCTCAGCAGGACAGGTGTCAGACACAAACAAGGTATCTCAACCTCCTGGCACAACATCATTTTCTTTGCCTGATGACTGGGACAACAGAACCTCATATTTGCACTCCCCCTTCTCAACTGGACGAAGTTGTATCCCCCTCCATGGTGTTAGTCCAGAAGTGAATGAACTATTGATGGAAGCCCAGCTGCTCCAGGTATCCCTTCCTGAAATTCAGGAACTTTACCAGACTTTACTTGCAAAGCCAAGCCCTGCTCAGCAGACTGACCGAAGCTCACCAGTGAGACCCAGCAGTGAGAAGAATGACTGTTGCCGAGGGAAGCGAGATGGAATTAACAGTCTTGAGAGAAAACTGAAGAGACGCCTGGAAAGAGAGGGCCTCTCCAGTGAGCGGTGGGAACGAGTTAAGAAAATGCGGACCCCCAAAAAGAAGAAAATCAAACTGAGCCACCCCAAGGACATGAACAATTTCAAGTTAGAGAGAGAGCGTAGCTATGAATTAGTTCGTTCTGCTGAAACTCATTCCCTGCCCTCAGACACATCCTATTCCGAACAGGAAGACTCTGAGGATGAAGATGCCATCTGCCCAGCTGTGAGCTGCCTGCAGCCAGAAGGAGATGAGGTGGACTGGGTCCAGTGTGATGGCAGCTGCAATCAGTGGTTTCATCAGGTCTGTGTTGGTGTCTCCCCAGAGATGGCAGAGAAAGAAGACTACATCTGTGTGCGCTGTACTGTGAAGGACGCACCAAGCCGAAAGGTTTAA'''
poi_0 = rss.seqmanip.seq_to_protein_obj(amanda_IRES)
poi_1 = rss.seqmanip.seq_to_protein_obj(amanda_CAP)

cap = poi_1['1'][0]
ires = poi_0['1'][0]

full_construct =amanda_CAP +  amanda_IRES 
kelong = rss.propf.get_k( full_construct, .03, 1.7, 0)[1:-1]
kelong[1885] = 0  # Cap stop codon
kelong[-1] = 0 #IRES stop codon
IRES_start = 1886

k_init_cap = 4.8e-2
k_init_ires = 4.9e-2

k_on_c = 4.8e-4
k_off_c = 2e-3
k_on_i = 1.8e-4
k_off_i = 6.6e-3
k_on_ic = 1.5e-3

kout_cap = 1.7
kout_ires = 1.7


flagtags = cap.tag_epitopes
suntags = ires.tag_epitopes

probe_locations = np.zeros([2,len(kelong)], dtype=np.intc  )
probe_locations[0,flagtags['T_Flag']] = 1
probe_locations[1,np.array([suntags['T_SunTag']]) + IRES_start   ] = 1

#@title Model Setup

#states                    [Cap    IRES]
stoich_states = np.array([[  1,  0,  ],  # cap turning on
                          [ -1,  0,  ], # cap turning off
                          [  0,  1,  ], # IRES turning on (cap off)
                          [  0, -1,  ], # IRES turning off 
                          [  0,  1,  ]], #IRES turning on (cap on)
                         dtype = np.intc)


#frame shift reaction 
stoich_lattice = np.zeros([4,len(kelong)], dtype=np.intc  )
stoich_lattice[0,0] = 1 #enter CAP
stoich_lattice[1,1886] = 1 #enter IRES
stoich_lattice[2,1885] = -1 #leave CAP
stoich_lattice[3,-1] = -1  #leave IRES

                #off  | cap on |  ires on  | cap + ires on
xi_states = np.array([[0,0]], dtype= np.intc)
xi_lattice = np.zeros([1,len(kelong)], dtype=np.intc)

n_total_reactions = 4 + 5


parameters = np.array([k_on_c, k_off_c, k_on_i, k_off_i, k_on_ic,
                       k_init_cap, k_init_ires, kout_cap, kout_ires,], dtype=np.float)

additional_rules = '''

#propensity function for cap-ires model
#state reactions

#CAP is off, add k_on_cap
if state[0] == 0:
    wn[0] = parameters[0]
    
#CAP is on, add k_off_cap
if state[0] == 1: 
    wn[1] = parameters[1]
    
#IRES is off and Cap is off, add k_IRES_on
if state[1] == 0 and state[0]==0:
    wn[2] = parameters[2]
    
#IRES is on, add k_IRES_off
if state[1] == 1:
    wn[3] = parameters[3]

#IRES is off and Cap is on, add k_IRES_CAP_on
if state[1] == 0 and state[0]==1:rs
    wn[4] = parameters[4]
    
# ribosomes coming in and out reactions

if free[0] and state[0] == 1:
    #if the front location is free, allow kin
    wn[5] = parameters[5]
    
if free[1886] and state[1] == 1:
    #if the IRES location is free, allow kin
    wn[6] = parameters[6]

if X[1885] == 1:
    # if its in the final location CAP
    step[1885] = 0
    wn[7] = parameters[7]
    
if X[3350] == 1:
    # if its in the final location IRES
    step[3350] = 0
    wn[8] = parameters[8]

'''
#@title Compile the model
#rss.model_builder.compile_model('amanda_model', overwrite=True, rules = additional_rules)
                                
model = rss.model_builder.get_model('amanda_model')


#how much does the IRES ORF weigh in MW? (removing the cap since this strand is an IRES)
ires_molecular_weight_blank = rss.diffcalc.calculate_rna_strand_base_mw(amanda_IRES, n_loops=24,fluorophore='mCherry' ) - rss.diffcalc.mw_table['7mG']
#how much does the CAP ORF weigh in MW?
cap_molecular_weight_blank = rss.diffcalc.calculate_rna_strand_base_mw(amanda_CAP, n_loops=0,fluorophore='mCherry' )
#how much does RNA construct weigh in MW?
blank_total = ires_molecular_weight_blank + cap_molecular_weight_blank
rss.diffcalc.mw_table['cy3'] = 627.7 #adding the MW of cy3

aa_seq_IRES = rss.seqmanip.nt2aa(amanda_IRES)  #IRES amino_acid seq
aa_seq_CAP = rss.seqmanip.nt2aa(amanda_CAP) #CAP amino_acid seq
#Whats the MW change per position as a ribosome translates? Including tags/fluorphores
aa_mw_vec_IRES = rss.diffcalc.calculate_single_rib_mw(aa_seq_IRES, probe_locations[1][len(aa_seq_CAP):],fluorophore= 'GFP')
aa_mw_vec_CAP = rss.diffcalc.calculate_single_rib_mw(aa_seq_CAP, probe_locations[0][0:len(aa_seq_CAP)],fluorophore= 'cy3')


aa_total = np.hstack([aa_mw_vec_CAP, aa_mw_vec_IRES])

fig,ax = plt.subplots(2,1,tight_layout=True,dpi=200, ) 
ax[0].plot(aa_mw_vec_CAP, color='#59b315')
ax[1].plot(aa_mw_vec_IRES, color='#0b9eb5')
ax[1].set_xlabel('codon number')
ax[0].set_ylabel('CAP MW (daltons)')
ax[1].set_ylabel('IRES MW (daltons)')
ax[0].set_title('CAP')
ax[1].set_title('IRES')
def ribpos_to_mw_custom(X, aa_vec, base):
    mw_per_pos = np.zeros(X.shape[:-1])
    for i in range(X.shape[0]):
      mw_per_pos[i,:] = np.sum(aa_vec[
        X[i,:,:]], axis=1)
    return mw_per_pos + base

def brownian_motion(df_vec,t ):
    traj = np.zeros( (2,) + df_vec.shape ) 

    current_x = traj[:,:,0]
    m = 2
    current_t = t[0]
    for i in range(0, traj.shape[-1]):
        
        x = brownian_step(current_x, df_vec[:,i], current_t, t[i] )
        current_t = t[i]
        traj[:,:,i] = x
        current_x = x
    return traj

def brownian_step(current_x, df_vec, t0, tf):
    dt = np.float(tf-t0)
    s = np.sqrt (4.0* df_vec* dt) * np.random.randn(*current_x.shape)
    return current_x + s


from matplotlib import cm
fig,ax = plt.subplots(1,4,dpi=300, tight_layout=True)

parameters = np.array([k_on_c, k_off_c, k_on_i, k_off_i, k_on_ic,
                       k_init_cap, k_init_ires, kout_cap, kout_ires,], dtype=np.float)
n_traj = 500 #@param {type:"slider", min:1, max:1000, step:1}
tt = 5000 #@param {type:"slider", min:1000, max:20000, step:1000}
t_array = np.linspace(0,tt,tt+1)

st = time.time()

#store the diffusion vectors based on:
#    off, cap_on/IRES_off, IRES_on/cap_off, IRES_on/Cap_on
dvec_bothhigh = []  #store the diffusion vectors
dvec_caphigh = []
dvec_ireshigh = []
dvec_both_low = []


import tqdm.notebook as tq
for i in tq.tqdm(range(n_traj)):
  r1 = np.random.randint(2)  #pick a random initial state
  r2 =  np.random.randint(2)
  xi_states = np.array([[r1,r2]], dtype= np.intc)
  ssa_soln = rss.solver.solve_custom_model(model, parameters, kelong, t_array,
                            stoich_lattice, stoich_states,
                            xi_lattice, xi_states, n_traj=1,
                            probe_loc=probe_locations, poi=None,)  #run the trajectory


  X = ssa_soln.ribosome_locations #get the ribosome locations

  
  if X.shape[-1] != 0:
    print(np.max(X))
    print(np.max(ssa_soln.states))
    if np.max(X) == 3352:
        X_tmp = X
    #calculate diffusion rate from the ribosome tracks
    aa_total = np.append(aa_total, aa_total[-1])
    mw_vec = ribpos_to_mw_custom(X, aa_total, blank_total)
 
    df_vec = rss.diffcalc.calculate_diffusion_constant(mw_vec)

    av_int_cap = np.mean(ssa_soln.intensity_vec[:,:,0],axis=1)  #average cy3 probecount
    av_int_IRES = np.mean(ssa_soln.intensity_vec[:,:,1],axis=1) #average GFP probecount

    if av_int_cap < 10 and av_int_IRES < 10:  #store them appropriately 
      dvec_both_low.append(df_vec)

    if av_int_cap >= 10 and av_int_IRES < 10:
      dvec_caphigh.append(df_vec)

    if av_int_cap < 10 and av_int_IRES >= 10:
      dvec_ireshigh.append(df_vec)

    if av_int_cap >= 10 and av_int_IRES >= 10:
      dvec_bothhigh.append(df_vec)

    #pbar.update()

#traj = brownian_motion(np.vstack(dvec_low), t_array)
vecs = [dvec_both_low, dvec_caphigh, dvec_ireshigh, dvec_bothhigh]
#plot the results
for i in range(4):
  traj = brownian_motion(np.vstack(vecs[i]), t_array)
  traj = traj[:,:,-2700::60]
  x = traj[0].flatten()
  y = traj[1].flatten()
  k = kde.gaussian_kde([x,y])

  msd = np.mean((traj[0, :, 1:] - traj[0, :, :-1])**2 + (traj[1, :, 1:] - traj[1, :, :-1])**2 )
  print(msd)
  nbins = 50
  xi, yi = np.mgrid[x.min():x.max():nbins*1j, y.min():y.max():nbins*1j]
  zi = k(np.vstack([xi.flatten(), yi.flatten()]))
  
  # Make the plot
  ax[i].set_facecolor(cm.viridis(0))
  ax[i].pcolormesh(xi, yi, zi.reshape(xi.shape), shading='auto')
  
  ax[i].set_xlim([-60,60])
  ax[i].set_ylim([-60,60])
  ax[i].set(aspect='equal')



