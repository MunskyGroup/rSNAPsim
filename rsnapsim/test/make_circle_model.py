# -*- coding: utf-8 -*-
"""
Created on Tue May 31 16:40:22 2022

@author: wsraymon
"""


import os
print(os.getcwd())
os.chdir('../..')
print(os.getcwd())
import rsnapsim as rsim
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import kde
import time
os.chdir('./rsnapsim/test')

kdm5b = 'AUGGACUACAAGGACGACGACGACAAAGGUGACUACAAAGAUGAUGACGAUAAAGGCGACUAUAAGGACGAUGACGACAAGGGCGGAAACUCACUGAUCAAGGAAAACAUGCGGAUGAAGGUGGUGAUGGAGGGCUCCGUGAAUGGUCACCAGUUCAAGUGCACCGGAGAGGGAGAGGGAAACCCGUACAUGGGAACUCAGACCAUGCGCAUUAAGGUCAUCGAAGGAGGUCCGCUGCCGUUCGCUUUCGAUAUCCUGGCCACUUCGUUCGGAGGAGGGUCGCGCACGUUCAUCAAGUACCCGAAGGGAAUCCCGGACUUCUUUAAGCAGUCAUUCCCGGAAGGAUUCACUUGGGAACGGGUGACCCGGUAUGAAGAUGGAGGUGUGGUGACUGUCAUGCAAGAUACUUCGCUGGAGGAUGGGUGCCUCGUGUACCACGUCCAAGUCCGCGGAGUGAAUUUCCCGUCCAACGGACCAGUGAUGCAGAAAAAGACGAAGGGUUGGGAACCUAAUACUGAAAUGAUGUACCCCGCAGACGGAGGGCUGAGGGGCUACACCCACAUGGCGCUGAAGGUCGACGGAGGAGAUUACAAGGAUGACGACGAUAAGCAACAAGAUUACAAAGACGAUGAUGACAAGGGCCAGCAGGGCGACUACAAGGACGACGACGACAAGCAGCAGGACUACAAAGAUGACGAUGAUAAAGGAGGAGGACAUCUGUCCUGUUCGUUCGUGACCACCUACAGAUCAAAGAAAACCGUGGGAAACAUCAAGAUGCCGGGCAUUCAUGCCGUCGACCACCGCCUGGAGCGGCUCGAAGAAUCAGACAAUGAGAUGUUCGUCGUGCAAAGAGAACAUGCCGUGGCCAAGUUCGCGGGACUGGGAGGCGGUGGAGGCGAUUACAAAGACGAUGAUGACAAGGGUGACUAUAAAGACGACGAUGACAAAGGGGAUUACAAGGAUGAUGAUGAUAAGGGAGGCGGUGGAUCAGGUGGAGGAGGUUCACUGCAGGCGAUCGCCAUGGAGGCGGCCACCACACUGCACCCAGGCCCGCGCCCGGCGCUGCCCCUCGGGGGCCCGGGCCCGCUGGGCGAGUUCCUGCCUCCACCCGAGUGCCCGGUCUUCGAACCCAGCUGGGAAGAGUUCGCGGACCCCUUCGCUUUCAUCCACAAGAUCCGGCCCAUAGCCGAGCAGACUGGCAUCUGUAAGGUGCGGCCGCCGCCGGAUUGGCAGCCACCAUUUGCAUGUGAUGUUGAUAAACUUCAUUUUACGCCACGUAUCCAGAGACUGAAUGAAUUGGAGGCCCAAACUCGUGUAAAAUUGAAUUUCUUGGACCAGAUUGCAAAGUACUGGGAGUUACAGGGAAGUACUCUGAAAAUUCCACAUGUGGAGAGGAAGAUCUUGGACUUAUUUCAGCUUAAUAAGUUAGUUGCAGAAGAAGGUGGAUUUGCAGUUGUUUGCAAGGAUAGAAAAUGGACCAAAAUUGCUACCAAGAUGGGGUUUGCUCCUGGCAAAGCAGUGGGCUCACAUAUCAGAGGGCAUUAUGAACGAAUUCUCAACCCCUACAACUUAUUCCUGUCCGGAGACAGCCUAAGGUGUUUGCAGAAGCCAAACCUGACCACAGACACUAAGGACAAGGAGUACAAACCCCAUGAUAUUCCCCAGAGGCAGUCUGUGCAGCCUUCGGAAACGUGCCCCCCAGCCCGACGAGCAAAACGCAUGAGAGCAGAGGCCAUGAAUAUUAAAAUAGAACCCGAGGAGACAACAGAAGCCAGAACUCAUAAUCUGAGACGUCGAAUGGGUUGUCCAACUCCAAAAUGUGAAAAUGAGAAAGAAAUGAAGAGUAGCAUCAAGCAAGAACCUAUUGAGAGGAAAGAUUAUAUUGUAGAAAAUGAGAAGGAAAAGCCCAAGAGUCGAUCUAAAAAAGCCACCAAUGCUGUGGACCUGUAUGUCUGUCUUUUAUGUGGCAGUGGCAAUGAUGAAGACCGGCUACUGUUGUGUGAUGGCUGUGAUGACAGUUACCAUACCUUUUGCUUGAUCCCACCUCUCCAUGAUGUUCCCAAGGGAGACUGGAGGUGUCCUAAGUGUUUGGCUCAGGAAUGUAGUAAGCCACAAGAAGCAUUUGGCUUUGAACAAGCAGCCAGGGACUAUACCCUCCGUACUUUUGGGGAAAUGGCAGAUGCGUUCAAAUCUGAUUACUUCAACAUGCCAGUCCAUAUGGUCCCCACAGAGCUUGUUGAGAAAGAAUUUUGGAGACUAGUAAGCACUAUUGAGGAGGAUGUCACAGUGGAAUAUGGAGCUGACAUUGCCUCAAAGGAAUUUGGCAGUGGCUUUCCUGUCCGAGAUGGGAAAAUCAAACUCUCACCUGAGGAAGAGGAGUAUCUUGAUAGUGGCUGGAAUUUGAACAACAUGCCAGUGAUGGAGCAGUCUGUCCUUGCACAUAUUACUGCUGAUAUAUGUGGCAUGAAACUUCCUUGGUUGUAUGUGGGAAUGUGCUUUUCUUCAUUCUGUUGGCACAUUGAAGACCACUGGAGCUAUUCAAUUAACUACUUGCACUGGGGUGAGCCAAAAACCUGGUAUGGAGUCCCAGGGUAUGCUGCUGAGCAGCUAGAAAAUGUAAUGAAGAAACUAGCUCCAGAACUCUUUGUGUCCCAGCCGGAUCUCCUCCAUCAGCUUGUGACCAUCAUGAACCCCAAUACCCUGAUGACUCAUGAAGUGCCUGUUUACCGAACUAAUCAGUGUGCUGGGGAGUUUGUGAUUACAUUUCCAAGAGCCUACCACAGUGGUUUUAACCAGGGUUUUAAUUUUGCUGAGGCUGUUAACUUCUGCACUGUUGAUUGGCUGCCAUUAGGCCGACAGUGUGUGGAGCAUUAUCGCUUGCUUCAUCGAUAUUGUGUGUUUUCCCACGAUGAGAUGAUCUGCAAGAUGGCUUCCAAGGCUGAUGUAUUAGAUGUUGUAGUGGCUUCAACUGUUCAGAAAGACAUGGCCAUUAUGAUUGAGGAUGAGAAAGCUUUAAGAGAAACUGUCCGUAAAUUGGGAGUGAUUGAUUCGGAAAGAAUGGAUUUUGAGCUGUUGCCAGAUGAUGAACGUCAGUGUGUAAAAUGCAAAACUACAUGCUUCAUGUCUGCCAUCUCCUGUUCUUGUAAACCUGGCCUUCUUGUUUGCCUGCAUCAUGUAAAAGAAUUGUGUUCCUGUCCUCCUUAUAAAUAUAAAUUGCGGUAUAGGUACACGCUGGAUGAUCUCUACCCUAUGAUGAAUGCAUUGAAGCUUCGAGCAGAAUCUUACAACGAAUGGGCCUUGAAUGUGAAUGAAGCUUUGGAGGCAAAGAUCAACAAGAAGAAAAGCCUUGUCAGCUUCAAGGCUUUAAUUGAAGAAUCUGAAAUGAAGAAAUUCCCAGACAAUGAUCUUUUGCGACACCUUCGCCUAGUCACACAGGAUGCAGAGAAGUGUGCCUCUGUUGCGCAGCAGUUGCUUAAUGGCAAAAGGCAAACUAGAUAUCGAUCUGGUGGAGGGAAAUCCCAAAAUCAGUUGACAGUGAAUGAGCUCCGGCAGUUUGUAACACAGCUGUAUGCUCUUCCAUGUGUCCUCAGUCAGACACCAUUACUAAAGGAUCUCUUGAAUCGUGUAGAAGAUUUUCAACAGCAUAGUCAGAAACUACUCUCUGAGGAAACGCCUAGUGCUGCGGAGCUGCAGGACUUGCUAGAUGUCAGCUUUGAAUUUGAUGUUGAACUUCCACAGCUUGCUGAGAUGCGUAUCCGUUUGGAACAAGCCCGUUGGCUAGAAGAGGUGCAGCAAGCUUGCCUAGACCCCAGCUCCCUUACUUUAGAUGAUAUGAGACGUCUCAUAGACCUAGGGGUAGGGCUGGCCCCGUAUUCAGCAGUGGAGAAAGCUAUGGCCCGGCUGCAGGAACUGCUCACAGUGUCAGAGCACUGGGACGACAAAGCCAAGAGUCUCCUCAAGGCCAGGCCACGACAUUCAUUGAAUAGCCUUGCUACGGCAGUAAAGGAAAUCGAAGAGAUCCCUGCAUAUCUGCCCAAUGGUGCGGCUCUGAAAGACUCAGUGCAGAGAGCCAGAGACUGGCUUCAGGAUGUAGAGGGCCUGCAGGCUGGAGGACGUGUGCCAGUGUUAGACACACUCAUAGAACUUGUUACACGAGGCCGAUCUAUCCCGGUACAUCUGAAUUCUUUGCCAAGACUGGAAACCCUAGUAGCUGAGGUUCAGGCUUGGAAAGAAUGUGCUGUUAAUACAUUCUUGACUGAGAAUUCUCCAUAUUCUCUCUUAGAGGUGCUGUGUCCUCGAUGUGAUAUUGGCCUUUUGGGAUUGAAAAGGAAGCAGAGAAAGUUAAAGGAGCCCUUGCCAAAUGGAAAGAAAAAAAGCACCAAAUUAGAGAGUCUGAGUGACCUGGAGAGAGCUUUAACUGAAAGCAAGGAGACUGCUUCAGCUAUGGCAACUCUUGGGGAAGCUCGCCUAAGGGAAAUGGAAGCCUUGCAGUCUCUCAGACUCGCCAAUGAAGGGAAAUUGCUGUCGCCUCUCCAAGAUGUGGAUAUAAAAAUCUGCCUAUGUCAGAAGGCCCCAGCUGCCCCUAUGAUUCAAUGUGAACUCUGCAGGGAUGCUUUCCACACCAGUUGUGUGGCGGUACCCAGUAUUUCACAGGGCCUGCGAAUCUGGCUUUGUCCCCAUUGUCGGAGGUCAGAGAAACCUCCAUUAGAGAAAAUUCUGCCCCUGCUCGCCUCCCUUCAGCGUAUCCGAGUUCGCCUUCCUGAGGGAGAUGCACUUCGAUAUAUGAUUGAAAGAACCGUGAACUGGCAGCACAGAGCCCAGCAACUGCUUUCGUCAGGGAAUCUUAAAUUUGUGCAAGAUCGAGUGGGCUCAGGACUGUUAUAUAGCAGAUGGCAAGCCUCAGCAGGACAGGUGUCAGACACAAACAAGGUAUCUCAACCUCCUGGCACAACAUCAUUUUCUUUGCCUGAUGACUGGGACAACAGAACCUCAUAUUUGCACUCCCCCUUCUCAACUGGACGAAGUUGUAUCCCCCUCCAUGGUGUUAGUCCAGAAGUGAAUGAACUAUUGAUGGAAGCCCAGCUGCUCCAGGUAUCCCUUCCUGAAAUUCAGGAACUUUACCAGACUUUACUUGCAAAGCCAAGCCCUGCUCAGCAGACUGACCGAAGCUCACCAGUGAGACCCAGCAGUGAGAAGAAUGACUGUUGCCGAGGGAAGCGAGAUGGAAUUAACAGUCUUGAGAGAAAACUGAAGAGACGCCUGGAAAGAGAGGGCCUCUCCAGUGAGCGGUGGGAACGAGUUAAGAAAAUGCGGACCCCCAAAAAGAAGAAAAUCAAACUGAGCCACCCCAAGGACAUGAACAAUUUCAAGUUAGAGAGAGAGCGUAGCUAUGAAUUAGUUCGUUCUGCUGAAACUCAUUCCCUGCCCUCAGACACAUCCUAUUCCGAACAGGAAGACUCUGAGGAUGAAGAUGCCAUCUGCCCAGCUGUGAGCUGCCUGCAGCCAGAAGGAGAUGAGGUGGACUGGGUCCAGUGUGAUGGCAGCUGCAAUCAGUGGUUUCAUCAGGUCUGUGUUGGUGUCUCCCCAGAGAUGGCAGAGAAAGAAGACUACAUCUGUGUGCGCUGUACUGUGAAGGACGCACCAAGCCGAAAGGUUUAA'

kdm5b_mrna = rsim.seqmanip.seq_to_protein_obj(kdm5b)['1'][0]
#@title Circularization Model building code 

########### Parameter setup ###########
k_circularize = .004
k_linearize = .02
kin_circularized = .013 # rate to 
kin_linear = .002
kout = 10

construct_end = len(kdm5b_mrna.kelong)
parameters = np.array([k_circularize, k_linearize,
                       kin_circularized, kin_linear,
                       construct_end], dtype=float)

########### Forward TASEP rates ###########
forward_rates = kdm5b_mrna.kelong + [0,] #forward rates of the construct (with an extra 0 at the end)


########### Stoichiometry for state reactions ###########
#stoichiometry for the states  
# we have 2 states the mRNA can be in in our case:
#     hairpin formed
#     hairpin not formed 
stoich_states = np.array([[-1,  1,  ],
                          [ 1,  -1,  ],], dtype = np.int32)

########### Stoichiometry for lattice reactions ###########
# we have 2 reactions in our case:
#     ribosomes entering at the start of the lattice (start codon)
#     ribosomes leaving at the end of the lattice (stop codon)
#stoichiometry for the lattice ractions
stoich_lattice = np.zeros([3,len(forward_rates)], dtype=np.int32)
stoich_lattice[0,0] = 1 #entering at rate 1
stoich_lattice[1,0] = 1 #entering at rate 2
stoich_lattice[2,-1] = -1 #leaving

########### Initial States of the states and lattice ###########
xi_states = np.array([[1,0]], dtype= np.int32)
xi_lattice = np.zeros([1,len(forward_rates)], dtype=np.int32)


additional_rules_2 = '''
#               0                 1               2             3         4       5  
#parameters = [k_circularize, k_linearize, kin_circularized, kin_linear, kout, end_loc]

#propensity function for hairpin model

#### Define extra parameters in C 
int end_loc = cast_to_int(parameters[5]) #end of the construct
int l = X[1886] #overwrite to min_length
#### define state related reactions



if state[0] == 1:
    #circularized
    wn[0] = parameters[0]   
    
if state[1] == 1:
    #linearized
    wn[1] = parameters[1] 

#### lattice related reactions (ribosomes entering and leaving)

if free[0]:
    if state[0] == 1:
        wn[2] = parameters[2]
    if state[1] == 1:
        wn[3] = parameters[3]

if X[end_loc] == 1:
    # if its in the final location, add kout
    step[end_loc] = 0
    wn[4] = parameters[4]

'''

#compile the model and load it back in
rsim.model_builder.compile_model('circle_model', overwrite=True, rules=additional_rules_2,
                                eigen_path='/usr/include/Eigen')
circularization_model = rsim.model_builder.get_model('circle_model')
